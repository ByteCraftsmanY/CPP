{
	"Sample": {
		"prefix": "sf",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"$2",
			"int main()",
			"{",
			"\tfreopen(\"#input.txt\", \"r++\", stdin);",
			"\tfreopen(\"#output.txt\", \"w++\", stdout);",
			"\t$1",
			"\treturn 0;",
			"}",
			"$0"
		],
		"description": "Log output to console"
	},
	"Insert Sample": {
		"prefix": "ff",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define REP(i, a, b) for (int i = a; i < b; i++)",
			"#define all(x) x.begin(), x.end()",
			"typedef long long int ll;",
			"typedef vector<int> vc;",
			"typedef pair<int, int> pr;",
			"#define deb(...) logger(#__VA_ARGS__, __VA_ARGS__)",
			"template<typename ...Args>",
			"void logger(string vars, Args&&... values) {",
			"cout << vars << \" = \";",
			"string delim = \"\";",
			"(..., (cout << delim << values, delim = \", \"));",
			"}",
			"template<typename ...T>",
			"void printer(T&&... args) {",
			"\t((cout << args << \" \"), ...);",
			"}",
			"template<typename F>",
			"auto debug_func(const F& func) {",
			"return [func](auto &&...args) { // forward reference",
			"cout << \"input = \";",
			"printer(args...);",
			"auto res = func(forward<decltype(args)>(args)...);",
			"cout << \"res = \" << res << endl;",
			"return res;",
			"};",
			"}",
			"template<typename F>",
			"auto beautify(const F& func) {",
			"return [func](auto &&...args) { // forward reference",
			"cout << \"========\" << endl;",
			"func(forward<decltype(args)>(args)...);",
			"cout << \"========\" << endl;",
			"};",
			"}",
			"template <typename... T>",
			"void read(T &...args) {",
			"\t((cin >> args), ...);",
			"}",
			"template <typename... T>",
			"void write(string delimiter, T &&...args) {",
			"\t    ((cout << args << delimiter), ...);",
			"}",
			"template <typename T>",
			"void readContainer(T &t) {",
			"\t    for (auto &e : t) {",
			"\t\t        read(e);",
			"\t}",
			"}",
			"template <typename T>",
			"void writeContainer(string delimiter, T &t) {",
			"    for (const auto &e : t) {",
			"        write(delimiter, e);",
			"    }",
			"write(\"\\n\");",
			"}",
			"$2",
			"int main()",
			"{",
			"\tfreopen(\"#input.txt\", \"r++\", stdin);",
			"\tfreopen(\"#output.txt\", \"w++\", stdout);",
			"\tios_base::sync_with_stdio(false);",
			"\tcout.tie(NULL);",
			"\tcin.tie(NULL);",
			"\t$1",
			"\treturn 0;",
			"}",
			"$0"
		],
		"description": "insert sample file"
	}
}